# -*- coding: utf-8 -*-
"""Grafos-Matriz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVCex9lCiGccLeHFZ8B0pUhDdgXWyoTo

# Implementando Grafos
@Lariza Laura de Oliveira
"""

# Represenção por Matriz de Adjacência em Python


class Grafo(object):

    # Inicializando uma matriz
    def __init__(self, size):
        self.adjMatriz = []
        for i in range(size):
            self.adjMatriz.append([0 for i in range(size)])
        self.size = size

    # Adicionando uma aresta
    def add_edge(self, v1, v2):
        if v1 == v2:
            print("Mesmos Vértices %d and %d" % (v1, v2))
        self.adjMatriz[v1][v2] = 1
        self.adjMatriz[v2][v1] = 1

    # Removendo arestas
    def remove_edge(self, v1, v2):
        if self.adjMatriz[v1][v2] == 0:
            print("Sem arestas entre %d and %d" % (v1, v2))
            return
        self.adjMatriz[v1][v2] = 0
        self.adjMatriz[v2][v1] = 0

    def __len__(self):
        return self.size

    # Printando a Matriz
    def print_matriz(self):
        for row in self.adjMatriz:
            for val in row:
                print(val, end=' ')
            print()



def main():
    g = Grafo(5)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)

    g.print_matriz()


if __name__ == '__main__':
    main()